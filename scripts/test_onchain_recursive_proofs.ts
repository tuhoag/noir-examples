import { BarretenbergBackend } from "@noir-lang/backend_barretenberg";
import { getCircuit } from "../test/utils";
import { assert, expect } from "chai";
import { Noir } from "@noir-lang/noir_js";
import { ignition } from "hardhat";
import { bytesToHex } from 'viem';

import VerifierModule from "../ignition/modules/Verifier";
import toml from '@iarna/toml';
import fs from "fs";

async function main() {
  let circuits: { equality: Noir, recursive: Noir };
  let backends: { equality: BarretenbergBackend, recursive: BarretenbergBackend };

  const { circuit: equalityCircuit, backend: equalityBackend } = await getCircuit("equality");
  const { circuit: recursionCircuit, backend: recursionBackend } = await getCircuit("recursion");

  circuits = {
    equality: equalityCircuit,
    recursive: recursionCircuit,
  };

  backends = {
    equality: equalityBackend,
    recursive: recursionBackend,
  };

  const recursiveProof = {
    proof: `0x00000000000000000000000000000000000000000000000a14bc6b2da701f15900000000000000000000000000000000000000000000000a762c9e1fe80ee11500000000000000000000000000000000000000000000000fd986ad643b42cce50000000000000000000000000000000000000000000000000001ea9ad2b8feef000000000000000000000000000000000000000000000000ad92a7bef6fdbd4e0000000000000000000000000000000000000000000000053c1bd4df4db2c2bc0000000000000000000000000000000000000000000000066016a54a158896720000000000000000000000000000000000000000000000000001a806d1e67bf9000000000000000000000000000000000000000000000008b4f29d1bb4e9c52200000000000000000000000000000000000000000000000ad4bae971c101109700000000000000000000000000000000000000000000000fd59e9cd520337c1600000000000000000000000000000000000000000000000000027365d173afcb0000000000000000000000000000000000000000000000039a2f344c745d6efd0000000000000000000000000000000000000000000000016a0d12b252dbe1b800000000000000000000000000000000000000000000000ab9cab3f428dba5fb0000000000000000000000000000000000000000000000000000101060fc13671809090fd864fd502d2760a1addc449d16f1b144660509b6e34ed894cf9d71350339e52a2d7e1eb5dad44f108be27e146a79b4f68d3ffedee00acd714d975def2afd301b3a387d3f537242cedaf42aceba7168e131bd01560846e94f223aced0230cadd44816b9818d2ff9520776a9c8ff0a09485dec49792e78d0721d4436140f2bc677e4fa361f54f5632718a7d809deab85c49564c2e80bc4239065d70c732926a295a30f161a9cb473f65bb1d4c33e93d30cebaca220f1de124828b2fa88240253e473afbc91089fea36f03bf5b083c40275446d55ad0feae206078bf18826b68fef2be756710438029975d8a51e7723647e5eecb24f9d62a7af40ae21c8032b649537ba17787892cf1c239d5893d1e17fd7fcc69fc44dc0ba0ac9557d6e2aa0bba9d974c08838592ec098fd819e85a4aa6a09a2c66233ec59b3725000b8149579aca198a6b6125aeed93754d700aa8ab524a8916753c74f1b1a037cd51f08ab9ec9087f6ed2d9b94dfb1b57624a9747f6cc1eeaaf43f792b0398a7e86a11c3e1bdf280af21ac53f0c24d2439430b1e852a2bc673d5743f631d5e2e882132c19e9896b84c1f5131414f0e1f39b5a536b81b36f053d8f501d870b39c4ac3f0b7f9f80a273995a023e4298a6f2aaed72c30328d685645b1a8e6cbb00166f9e00b4a00e4315de1a884adebb960cc55970f0214222065ad522af44b08f6bbf361ed08bebeba2e0111fc3b96f8c62758c61fcd747d164ff888e562e5b870b06a10e730b37d127c1367241b04635eb1b6912111b0d3b156cf656ea2e568f347d0b294cecb1c35dc8201dba10ce95c695e5db82e2f6ccbef6df927033ba48a3290d1cc3518fa7f158a8f6400bb53017681b7ec5fd2f76296329ff89a23603826c452a9e4ff279bc91bd79ed4665cfe00fee2077bb97f82bcdb027d3dd7833353fce0e64bd04612c673b53c3f66b00b3a011326fd6a801044b90d5f73a38e396792719fd69d0b320c7331a267f1dd3f7126540e661e64d31a82f7017c733f55daaad23369765c258c2b7b79f3a0d821f92ccd18c1b90383f789bf1e428213f477ca618df7cf9029d57d2a9d811c53448573dc7f33e027790e2e0115337cb6e95bff504012a30dcd805e1042f2370b1571385e66488ee0c8c4693a8b5815a22b0249e21ac3bf9e52979b4f578e5f3f4ae5bde596c537ef863334634db7e36a789e2400ca7cdb1fd0ce057addb4e6dfc62620939d41c71381ab3305699361a8fc60c0115f3c7af7cb2f6ef8e3c9eef38ef4ff55b03c30a1b03dd9aef69c836aa4c78682c41fde2ada20d44c4c2cc3e57c43ed333db649c263b55dcbe94868c677fa300054e7647c22cc7dd9a8fe1ebbd32662d9da43b0c2cc9073e9e143771d0bb33622e301cfa2309a952dbd2dc54648fa3261843871d2b5ac1317ada770bb8148a51175cf89db5927d108d95a39d484660565eaabe308f0b135da2bcd50d59ad0db10ab19864da5d8e035355a2730ebc066d8f02b45c27cb8b18c731cbcc5c92346e0475e49952903291e668724a0767f5b4f765c5cb132d361c34ee9be710b8207a0e1c982e52a86bdb71e514e302182957ecf0dac6999a9b84e1aaf503e7d8e7c51c090b213081de48bd85f7eb0a8aa010f01819223213ddf341092b29da3db27626b17082b7e21750fafc4dd5cb8467696a2e5b9cd61f627eab1c52a6889f84b2078177263dd0b21d1b68ce1627fd449bd91bc7882afd71a43b3ee3e7975b32382beb4a5c74637943bfda7806853df9787e5c4a7f2e9057f510289f88fb7c967e029e987cb68988c98a08c9a0a144db53ad8414cb9cff61dd2eadf8d6fe40072221d7f8df3405c4f0d63edbb5fa066fdec1daefd56c6c0290f4a2e0b58b5b3ea30904d6e295426625b26b27d9171c22e2ed9d1b77be0d342e13843c322c40d5b0121acfc8f8cc0be4852dd13e282a864077c48d47283e7edbfb4b8b090a239e390243a8a321d13eda2a0587fca451eaabdb9a5a28518ef40a83e103cbdf5e322412e32c8a1b962cfbfa257084605c4ad91d4bf504618deb566d7a4ad6e1b8ad4217f5393ee654aefbb8c4215a55bb25cca1939c5b0750ccc1786e05cda4da0eae0679f2b6d4d4bc66fd4ae791829743c0869956f1b93a205cbd38112af884c4250781c8a0e7f125f061d1682d38bbb6ef4551a018b53bec11d8c845286462e1ab22aea8cb67cc5d25f866a280fcbf77149eb0536bc1a34d30e4d07b12aa6b29e504ef35ddca2eefbd705fd530501450b08a7e59985229c64e4f3fc58922c5224310bbf580d8ba78d089fdeeebb61d8a3c1d6ba74cf0ebe077c03cba7c160213f60b9406d7958b94d1c53e4f7c749482c4b6bb4ef95ebad97cd8a9263472a2135209d126e50ac74594e43d8a2ef132fd3538a91d461320da1c2f8b98f5d3c69506092b9f4bb432b8091c94abf08827917e7729372bbdebed5261334f08beb4b1d227841c59b7d2ecea5e40ea1b6949624008dd37f469e188de198befbda1e1e93f23cd4dfba4f3786294b18bc4f9e50f717a27b56e556e8e02f0a9897452e318a91cf62d27c81abac21c6ef7e6d4202ba6f903e6149cf250fbbb8895aa113597971a85d21faadb4607a2d83510811b08eff8446ec7d93fe185ed3f5a28abed0fb3181e003d86a5756d6881147264c3aeda487f3749fc3f5a855755d895bf925fa80671a1a33b4315956944790a6904a481abeda3153390880f63ed7dc862ad4de9000c179ebf069e85a8ab2140591e9c9e82f6548925a7204a588023471aaefe4002cb69107d900cd43f89ed74a3ccd451cf996d7b696f4765dfc19e94409be1a7135a96c43f6eb9b4f5b0866dd53db7cb0429b79a418cc53b017f0402cf61f20403453084019d6d069608c407af612a8de2627603df77a939c09e968f794ef9322b20bb7b2413f96a93790f4c953420502914f289c7f498262fb99c74b5c69788038fb3910f6e12712c252be08530bcb8eee520cb4e747be75aa5e62d6558392b`,
    publicInputs: [
    ],
  }

  const { recursionVerifierContract } = await ignition.deploy(VerifierModule);
  const onChainRecursiveVerification = await recursionVerifierContract.verify(recursiveProof.proof, recursiveProof.publicInputs);
  expect(onChainRecursiveVerification).to.be.true;
  console.log(`on-chain recursiveVerification: ${onChainRecursiveVerification}`);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});