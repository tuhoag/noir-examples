import { BarretenbergBackend } from "@noir-lang/backend_barretenberg";
import { getCircuit } from "../test/utils";
import { assert, expect } from "chai";
import { Noir } from "@noir-lang/noir_js";
import { ignition } from "hardhat";
import { bytesToHex } from 'viem';

import VerifierModule from "../ignition/modules/Verifier";
import toml from '@iarna/toml';
import fs from "fs";

async function main() {
  let circuits: { equality: Noir, recursive: Noir };
  let backends: { equality: BarretenbergBackend, recursive: BarretenbergBackend };

  const { circuit: equalityCircuit, backend: equalityBackend } = await getCircuit("equality");
  const { circuit: recursionCircuit, backend: recursionBackend } = await getCircuit("recursion");

  circuits = {
    equality: equalityCircuit,
    recursive: recursionCircuit,
  };

  backends = {
    equality: equalityBackend,
    recursive: recursionBackend,
  };

  const recursiveProof = {
    proof: "0x17e19fc8adbbd1c33f907cf8f0105c287b51cff0b86b837f20f13fce5963c935177ae38a4714ccf270ab74217ba3f608f9b69e8c6c820acb9bd4238283dee0212893005e5b3844e91dc1e813cd11d8233ef43ecde78be29d335c71c12ab2316f1aa832c99528ef1382900df4023029888776b15c8a4f059a2d81370b8708e4660e8e8e6dd5ec30cf3390aacc37d370905208d182945bd51e808a9bda21d7ce17162f8ad22271e35963e78d03b06b764eb23efd88dfd372da74cd905426544f993055dc7f74e9ded9e6b7bc8f02001727f78a50f573daf032fa0ea2c4de73fd5318bc6030b26d303fadec9cbcbd7d3278e1d34479d15cb5720d287ef631bb33d71039e683c28f164f9c64c104276f877f2f4be95012646754b08a6555021df17e2721d82489409a0fa927daf12ac811247e63d1e90a1d57720af9c204696cc0100bb6ee7a90b874bf7edf30be3e4a138a5437457f1e945cb3cebaa82225bee6d317a644259ebd36da063afe0baef8ee99323ef0e335ceb119034d0dabc52e5b4701a0fde899ec6c768a8b6c5ba3e02bd6e523771cf497e4bff6beb9ab02d6c7c8174d6f100f795ecdfcc0708a79692b0e6449ab721a0fc314827a160e217b0bc1005d750803d9463eaa8c404ffdc15f80b6c50e744605333d7e777908a69f0cb019ae3366c46e9a30478418e2c3056d743b0084ee479bb05c3ad5e37996aced0a081951f8e0064212006492b9966a1e74167794fad901936a37b75113d94ccf4111ef5533c55fe48af341af8931840518d205ef58ca5adc886225d376bc62e8021d80583c4d361be475d5c767f71dfa4dae55bcd5abb041df91f9cb179fb80686165676942a60cef0e07e9ae5c19cc1dfc074018cf7c0de43e065cb48c841774b17c8b414f6808767d291edd6a167bf14a5cea80959bc2fb68f4c42b3197cebc015e5bdae31ddb0dadbcdcb3322beef14c5582b147887643cb3732121a51bfc4105d5ea8c8ff729750ead669587ea020da4f0997d66276b88640897f41247bfca2183e10df375bb054ca52830c929aa3dc6b3acf4e9d9c6b48b6ca75de0842ebf0a0dc7571a7e3f84a2b065d0cd9578837bb72af1159c195bf24a03e46afa5922015965535d9ed64f0298c0a367197e4c429d4eae41ae7627406fc3e0daab297f24c52a44e6e82073d3a590a3015513ddad72a976739f37bf0cf98076517f36571b5892b76b77a504220bee9a73a36df9dc5211e5abb393037a05d91d4f7aac6b0e3df4f97bcb8986d099d3d184835d30de14a103b5310a30f498ac24e3880d863040d012011f6380b7a2f33cc3039812659d666c4f8991b341a3fcddc2cfaf881898fc53c1e39e1db811143a61faa82dcda59f85bdf0c7d457bc7754bd89b9551301be21900bb395a380ea1ef3da02290a5c294d0f0fd301175ca2c53724f3f516cee42846747119f7677f5857d268fe0c6e97f61212fd34826f29b9755f8b2603cd2606b668bd8453e6953963f866d502126ea903032a336b1286f43e3a9731079a4c0d6cd17b08a7cd2a72c7f0cdaa0424dd5206065466d6250de87c752e620f1119b9f990b9684eed026bd163db0945b338c7e1dcc9efaa0c231acbba0c4b1e693035b345ec229f34a9cb1fc336a8109375481819519b589437a1f1d4b9882236563c69aea9a6f31b3f0483bb9d7d12a5e3f11b1c7bcec3a6be96300f50b926037c432017672b4701d43de7b4045214b8529a1e1fa6022eb9458a6e49e7ea16ff3199dc152e80e6c2b8628c9025636cb93575e7eeaef11c5099d574bf35ea2258493b3cd76e83c6777df5373b18ea9c73fdfac45c0551e32d7f1f5b1eb34e1165adaf3df70893d4d5cebfdac956260732d8acb4febc68b5966e6bcf112daf11b1dc67e71cc6eaa8b2845a00169d91d318d8bad61e15a080ff64e0eb1e8d742d9dc8508ce8e233eecefeb0afa4d1fc18dd2fec2425fa6904de5372eabf164c01069fe4621fff8e8a654e33921be073f2bbb64cad6fb40b2c0ee4d338f9ad7c04d3c5eb1888bd12de4be36cf6144748f4ce24f5b072de3e97216bc7773444ad08a0ebf1cef17a97323278a65a0cae1df6e0939eb37608720233f2bbb56edbde29d0a249d68024af9ae869774bac6b2716cac1432122d03599cbcc7eac847f1b01a57a15559f1cf58bb7b8a3570ac35ba6ed42c42fbf3e7ac1ad46b57a37012f09e7c6c500c08410575d8e1b0d2fcb293c2f586a7addecf655f4e7bacdc838b5166bc060248168f8b880348e230a8b78e39a8d0eda4a5ca9dcb786902dc4feea2a49cfebcafcda856a05a9e2a96215816c459ca97c9491a142cc198430107ebc27aba29d934e5597ed7a73475472ea51b97256cd9a36d9404f993a58cceef3721863f92dd0f47886ffa00409d1ca5771b7d61e21ba8e765f0fa49c199a8e8831266613d8648149626ae7ca642ce466eb6db4b6da937e57ef33f54e941863872f0d34faf7d41fb5b24f9ced0fcfec4e492e793638f10a4a996025e9a2c7e2b2d825e0a4d365a1a034b706a12bcd43bc84e966ba3191410647290f3c337786081201118d230f4916030c6142067a7879ac4e4636ab4906f0f2ad0d85a974199cb5072ce4cdc41dbfd3da44227e28cfcab90444098f93a10cbb6e7b7efd853c36cf0be3a6ffa399963ac9741c7e41d1f2369632d2f2f9e85c597e0d2b4482c0adce14f201fd6c1952c6a3a07fd1dce3aa7554150b3df85aa1792933ed22e050bc4a1e005cfb34990f527dcce32577f562b411f74388f6cce698d45aaf013de0cac6270eb7f8fd18cbde57f9467913071af2cfd97bd3f53f2bb87f8170df9b70d94223d949fcee7ae236fa108bd4e7382f8a906d38c881e9beca2e83f0631459094b04917e5e46f54caeb72c557271bda9ce208ab799c09de65c05a0d19f03e63a0316d3894f7bbacd9e98d80af40e6b739c96d252cd21aed1f8d96150f0dcde3400305c8b5742a309ee2e468a412aa5d29f7d4ee758786c951c1af900dd96415489",
    publicInputs: [
      "0x0000000000000000000000000000000000000000000000000000000000000001"
    ],
  }

  const { equalityVerifierContract } = await ignition.deploy(VerifierModule);
  const onChainRecursiveVerification = await equalityVerifierContract.verify(recursiveProof.proof, recursiveProof.publicInputs);
  expect(onChainRecursiveVerification).to.be.true;
  console.log(`on-chain recursiveVerification: ${onChainRecursiveVerification}`);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});